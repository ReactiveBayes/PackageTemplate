name: Initialize Template

on:
  push:
    branches:
      - main
    # Only run on the first push to the repository after it's created from the template

jobs:
  initialize:
    # Skip running on the PackageTemplate repository itself
    if: github.event.repository.name != 'PackageTemplate'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.10'
      
      - name: Install UUIDs package
        run: julia -e 'using Pkg; Pkg.add("UUIDs")'
      
      - name: Run initialization script
        run: |
          julia -e '
          using UUIDs
          
          # Get repository info
          repo_name = ENV["GITHUB_REPOSITORY"]
          user_name, pkg_name = split(repo_name, "/")
          
          println("Repository: $repo_name")
          println("Owner: $user_name")
          println("Package: $pkg_name")
          
          # Generate new UUID
          new_uuid = string(UUIDs.uuid4())
          println("Generated UUID: $new_uuid")
          
          # Template UUID to replace
          template_uuid = "69a11d22-7c62-4348-b0c8-57c08a1b1a46"
          
          # Update files
          files_to_update = Dict(
              "Project.toml" => [
                  ("name = \"PkgName\"", "name = \"$pkg_name\""),
                  ("uuid = \"$template_uuid\"", "uuid = \"$new_uuid\""),
                  ("authors = [\"PLACEHOLDERNAME_CHANGE_PROJECT_TOML_LINE_3\"]", "authors = [\"$user_name\"]")
              ],
              "Makefile" => [
                  ("PLACEHOLDERNAME_CHANGE_MAKEFILE_LINE_22.jl", "$(pkg_name).jl")
              ],
              "README.md" => [
                  ("username/PkgName.jl", "$user_name/$pkg_name.jl"),
                  ("PkgName.jl", "$pkg_name.jl"),
                  ("username.github.io/PkgName.jl", "$user_name.github.io/$pkg_name.jl")
              ],
              "test/runtests.jl" => [
                  ("using PkgName", "using $pkg_name"),
                  ("@testset \"PkgName.jl\"", "@testset \"$pkg_name.jl\""),
                  ("Aqua.test_all(PkgName)", "Aqua.test_all($pkg_name)"),
                  ("JET.test_package(PkgName)", "JET.test_package($pkg_name)")
              ],
              "benchmark/benchmarks.jl" => [
                  ("using PkgName", "using $pkg_name")
              ],
              "docs/make.jl" => [
                  ("using PkgName", "using $pkg_name"),
                  ("DocMeta.setdocmeta!(PkgName,", "DocMeta.setdocmeta!($pkg_name,"),
                  ("modules=[PkgName]", "modules=[$pkg_name]"),
                  ("sitename=\"PkgName.jl\"", "sitename=\"$pkg_name.jl\""),
                  ("canonical=\"https://username.github.io/PkgName.jl", "canonical=\"https://$user_name.github.io/$pkg_name.jl"),
                  ("repo=\"github.com/username/PkgName.jl\"", "repo=\"github.com/$user_name/$pkg_name.jl\"")
              ],
              "docs/Project.toml" => [
                  ("PkgName = \"$template_uuid\"", "$pkg_name = \"$new_uuid\"")
              ],
              ".github/workflows/CI.yml" => [
                  ("using PkgName", "using $pkg_name"),
                  ("DocMeta.setdocmeta!(PkgName,", "DocMeta.setdocmeta!($pkg_name,"),
                  ("doctest(PkgName)", "doctest($pkg_name)")
              ],
              "docs/src/index.md" => [
                  ("CurrentModule = PkgName", "CurrentModule = $pkg_name"),
                  ("# PkgName", "# $pkg_name"),
                  ("Documentation for [PkgName]", "Documentation for [$pkg_name]"),
                  ("PkgName.jl", "$pkg_name.jl")
              ]
          )
          
          # Update each file
          for (file, replacements) in files_to_update
              if isfile(file)
                  content = read(file, String)
                  for (old, new) in replacements
                      content = replace(content, old => new)
                  end
                  write(file, content)
                  println("✓ Updated $file")
              else
                  println("⚠ Warning: $file not found")
              end
          end
          
          # Rename PkgName.jl
          src_file = "src/PkgName.jl"
          if isfile(src_file)
              dst_file = "src/$(pkg_name).jl"
              content = read(src_file, String)
              content = replace(content, "module PkgName" => "module $pkg_name")
              write(src_file, content)
              
              if src_file != dst_file
                  mv(src_file, dst_file)
                  println("✓ Renamed $src_file to $dst_file")
              end
          else
              println("⚠ Warning: src/PkgName.jl not found")
          end
          '
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
      
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Initialize package template with repository name and new UUID"
          git push
      
      - name: Create welcome issue
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Welcome to your new Julia package
          content-filepath: .github/post-init.md
          labels: documentation 